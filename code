; custom utility functions starts
 
; custom function for checking modulus
; if remaining of divided by 2 is integer, it returns true else false

(defun modc (a)
 (if ( typep ( / a 2 ) 'integer)
 t
 nil))


; custom function to reverse a list

(defun revc (l)
           (cond
             ((null l) '())
             (T (append (revc (cdr l)) (list (car l)))))) 


; custom function for generating a list from given number
; example given 3 it will return ( 1 2 3)


(defun bsequencec (n)
  (if (= n 0)
  (cons 0 '())
  (progn
  (cons n (bsequencec(- n 1))))))

; custom utility function ends
 
 
 
 3------ Combine max
 
 (defun consr (v a)
   (if (null v) (cons a nil) (cons (car v) (consr  (cdr v) a))))


(defun combine-max(a b)
  (if (not(or(null a) (null b)))
     (progn
         
              (if (> (car a) (car b))
                 (cons (car a) (combine-max (cdr a) (cdr b)) )
                 (cons (car b) (combine-max (cdr a) (cdr b))))
            
     )
         (progn
                
          (cond ((and(null a) (not(null b)))  (cons (car b)  (combine-max (cdr a) (cdr b))))
                ((and(null b) (not(null a)))  (cons (car a)  (combine-max (cdr a) (cdr b)))))
  )
 )
)

1----  
(defun consr (v a)
   (if (null v) (cons a nil) (cons (car v) (consr  (cdr v) a))))


2 ---- 

(defun fn(a)
   (cond ((typep a 'integer) '+)
         ( (typep  a 'cons ) 'append)))

(defun sumoflist (lst)
           (cond ((null lst) 0)
                 (t (+ (first lst) 
                       (sumoflist (rest lst))))))
(defun combinelists(list1  list2)
  (if (null list1)
      list2
     (cons(car list1) (combinelists (cdr list1) list2))))
     
(defun combine( a &rest b)
           (cond ((eq (fn a) '+) (sumoflist (cons a b)))
                 ((eq (fn a) 'append) (combinelists a b))))
                 


4--- alternate solution ----

(defun dist (seq1 seq2)

(if (null seq2)
      nil 
     (progn
       
        (cons (cons seq1 (cons (car seq2) '())) (dist seq1 (cdr seq2))))
))

----- 6


; Q -6 
; custom functions revc and modc is used

(defun oseq (n)
   (setq result '() )
   (setf a (bsequencec n))

   (setf b (revc a))

       (loop for x in b collecting
          (  progn  
                    (if (modc x)
                        nil
                        (setq result (consr  result x) )) 
          )
        )
      
      result

 )
 


-----------------------By Manoj---------------------

1---------------------------------
(defun consR(lst last)
    (if (eq (cdr lst) nil)
        (cons (car lst) (cons last nil))
        (cons (car lst) (consR (cdr lst) last))
        )
    )
(write (consR '(1 2 3 4) '6))
2----------------------------------

(defun fn(a)
   (cond ((typep a 'integer) '+)
         ( (typep  a 'cons ) 'append)))

(defun sumoflist (lst)
           (cond ((null lst) 0)
                 (t (+ (first lst) 
                       (sumoflist (rest lst))))))
(defun combinelists(list1  list2)                      ----------------------> I modified this function
    (if (and (eq list2 nil) (eq list1 nil))
        nil
        (if (null list1)
            (combinelists (car list2) (cdr list2))
            (cons(car list1) (combinelists (cdr list1) list2)))
        )
  )
     
(defun combine( a &rest b)
           (cond ((eq (fn a) '+) (sumoflist (cons a b)))
                 ((eq (fn a) 'append) (combinelists a b))))
(write (combine 9 0 10 3))

3---------------------------------
(defun combine(lst1 lst2)
    (if(null lst1)
        lst2
        (if(null lst2)
            lst1
            (if(>= (car lst1) (car lst2))
                (cons (car lst1) (combine (cdr lst1) (cdr lst2)))
                    (cons (car lst2) (combine (cdr lst1) (cdr lst2)))))))
(write (combine '(1 27 3 400) '(3 5 6 7)))
4-------------------------------
(defun dist(a lst1)
    (if(null lst1)
       nil
       (cons (append (list a) (car lst1)) (dist a (cdr lst1)))))
(write (dist 1000 '(3 5 6 7)))

5--------------------------------
(defun removethis(lst)
    (if(null lst)
       nil
       (if(member (car lst) (cdr lst))
          (cons (car lst) (removethis (cdr lst)))
          (removethis (cdr lst)))))
(defun rem-if-dupl-help(lst removelst)
    (if(null lst)
       nil
       (if(member (car lst) removelst)
           (rem-if-dupl-help (cdr lst) removelst)
           (cons (car lst) (rem-if-dupl-help (cdr lst) removelst))))
    )
(defun rem-if-dupl(lst)
    (rem-if-dupl-help lst (removethis lst)))
(write (rem-if-dupl '(3 5 6 7 5 6 7 1 3 1 2)))
6------------------------------------------
(defun help-oseq(n count)
    (if (< count n)
        (cons count (help-oseq n (+ count 2)))
        nil
        )
    )
(defun oseq(n)
    (help-oseq n 1)
    )
(write (oseq 22))

7------------------------------------------

(defun filter-help(lst num)
    (if (eq lst nil)
        nil
        (if (> (car lst) num)
            (cons (car lst) (filter-help (cdr lst) num))
            (filter-help (cdr lst) num)
            )
        )
 )
(defun filter(lst num)
    (if (and (typep num 'integer) (typep lst 'cons))
        (filter-help lst num)
        nil
     )
    )
(write (filter '(1 3 4) 1))

8---------------------------------------------------------
(defun is-bst(lst)
    (let ((rootvalue (car lst)))
    (let ((leftvalue (car (car (cdr lst)))))
    (let ((rightvalue (car (car (cdr (cdr lst))))))
    (let ((leftlst (car (cdr lst))))
    (let ((rightlst (car (cdr (cdr lst)))))
    (if (eq rootvalue nil)
        t
    (if (and (not (or (eq leftlst nil) (eq leftlst ()))) (not (or (eq rightlst nil) (eq rightlst ()))))
     (if (and (or (< leftvalue rootvalue) (eq leftvalue rootvalue)) (> rightvalue rootvalue)) 
         (and (is-bst leftlst) (is-bst rightlst))
         nil
      )
    (if (and (not (or (eq leftlst nil) (eq leftlst ()))) (or (eq rightlst nil) (eq rightlst ())))
     (if (or (< leftvalue rootvalue) (eq leftvalue rootvalue))
         (is-bst leftlst)
         nil
      )
    (if (and (or (eq leftlst nil) (eq leftlst ())) (not (or (eq rightlst nil) (eq rightlst ()))))
     (if (> rightvalue rootvalue)
         (is-bst rightlst)
         nil
      )
    (if (and (or (eq leftlst nil) (eq leftlst ())) (or (eq rightlst nil) (eq rightlst ())))
     t
        )))))))))))
(write (is-bst '()))
9---------------------------------------------------------------
(defun tree-height(lst)
    (if (or (eq lst nil) (eq lst ()))
        0
        (let ((leftheight (tree-height (car (cdr lst)))))
             (let ((rightheight (tree-height (car (cdr (cdr lst))))))
                  (if (or (> leftheight rightheight) (= leftheight rightheight))
                      (+ 1 leftheight)
                      (+ 1 rightheight)
                      )
                  )
             )
        )
    )
(write (tree-height '(1 (2 (10)) (3 (6) (8)))))
10-----------------------------------------------------------------
(defun post-order(lst)
    (if (not (or (eq lst nil) (eq lst ())))
        (let ((left (car (cdr lst))))
             (let ((right (car (cdr (cdr lst)))))
                  (post-order left)
                  (post-order right)
                  (write (car lst))
                  (write-char #\Space)
                  )
             )
        )
    )
(write (post-order '(1 (2 (10)) (3 (6) (8)))))



 
